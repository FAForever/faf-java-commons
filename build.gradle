buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.3")
  }
}

// source: https://github.com/mendhak/Gradle-Travis-Colored-Output/blob/master/ColoredOutput.gradle
tasks.withType(Test).configureEach {

  String ANSI_BOLD_WHITE = "\u001B[0;1m";
  String ANSI_RESET = "\u001B[0m";
  String ANSI_BLACK = "\u001B[30m";
  String ANSI_RED = "\u001B[31m";
  String ANSI_GREEN = "\u001B[32m";
  String ANSI_YELLOW = "\u001B[33m";
  String ANSI_BLUE = "\u001B[34m";
  String ANSI_PURPLE = "\u001B[35m";
  String ANSI_CYAN = "\u001B[36m";
  String ANSI_WHITE = "\u001B[37m";
  String CHECK_MARK = "\u2713";
  String NEUTRAL_FACE = "\u0CA0_\u0CA0";
  String X_MARK = "\u274C";
  String indent = '\t';

  def outputCache = new HashMap<TestDescriptor, List<String>>()

  beforeTest { TestDescriptor descriptor -> outputCache.put(descriptor, new ArrayList()) }

  onOutput { TestDescriptor descriptor, TestOutputEvent testOutputEvent ->

    def outputLines = outputCache.get(descriptor)
    if (outputLines != null) {
      outputLines.add(testOutputEvent.getMessage())
    }
  }

  afterTest { TestDescriptor descriptor, TestResult result ->
    if (result.failedTestCount > 0) {
      String output = outputCache.remove(descriptor).join(indent)


      def nameParts = descriptor.parent.name.split("\\.")
      def simpleParentName = nameParts[nameParts.length - 1]

      out.println()
      out.println(simpleParentName + " > " + descriptor.name + " STANDARD_OUT")
      out.println(indent + output)
      out.println()
    }
  }

  afterSuite { desc, result ->
    if (!desc.parent) { // will match the outermost suite
      def failStyle = ANSI_RED
      def skipStyle = ANSI_YELLOW
      def summaryStyle = ANSI_WHITE

      switch (result.resultType) {
        case TestResult.ResultType.SUCCESS:
          summaryStyle = ANSI_GREEN;
          break;
        case TestResult.ResultType.FAILURE:
          summaryStyle = ANSI_RED;
          break;
      }

      out.println("--------------------------------------------------------------------------");
      out.println("Results: " + summaryStyle + " ${result.resultType} " + ANSI_RESET
        + " (${result.testCount} tests, "
        + ANSI_GREEN + " ${result.successfulTestCount} passed " + ANSI_RESET
        + ", " + failStyle + " ${result.failedTestCount} failed " + ANSI_RESET
        + ", " + skipStyle + " ${result.skippedTestCount} skipped " + ANSI_RESET
        + ")");
      out.println("--------------------------------------------------------------------------");
    }
  }
}

subprojects {

  apply plugin: 'maven-publish'
  apply plugin: 'java-library'
  apply plugin: 'com.github.kt3k.coveralls'

  group = 'com.faforever.commons'
  version = '1.0-SNAPSHOT'

  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11

  repositories {
    mavenCentral()
  }

  publishing {
    publications {
      maven(MavenPublication) {
        from components.java
      }
    }
  }

  dependencies {
    annotationProcessor(libs.lombok)
    compileOnly(libs.lombok)
    compileOnly(libs.jetbrains.annotations)
    compileOnly(libs.jackson.databind)
    annotationProcessor(libs.slf4j.api)
    compileOnly(libs.slf4j.api)

    testAnnotationProcessor(libs.lombok)
    testCompileOnly(libs.lombok)
    testCompileOnly(libs.jetbrains.annotations)

    testImplementation(libs.junit.jupiter)
    testImplementation(libs.hamcrest.core)
    testImplementation(libs.mockito.core)
    testImplementation(libs.mockito.junit.jupiter)
    testImplementation(libs.jsonassert)
  }

  test {
    useJUnitPlatform()

    testLogging {
      exceptionFormat = 'full'
    }
  }

}
